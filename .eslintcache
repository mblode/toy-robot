[{"/Users/mblode/Code/toy/src/index.tsx":"1","/Users/mblode/Code/toy/src/components/Board.tsx":"2","/Users/mblode/Code/toy/src/components/Robot.tsx":"3","/Users/mblode/Code/toy/src/helpers/Data.ts":"4","/Users/mblode/Code/toy/src/components/File.tsx":"5","/Users/mblode/Code/toy/src/components/App.tsx":"6","/Users/mblode/Code/toy/src/components/Report.tsx":"7"},{"size":865,"mtime":1612065850890,"results":"8","hashOfConfig":"9"},{"size":1338,"mtime":1612065873103,"results":"10","hashOfConfig":"9"},{"size":5499,"mtime":1612066377668,"results":"11","hashOfConfig":"9"},{"size":337,"mtime":1612059645603,"results":"12","hashOfConfig":"9"},{"size":1141,"mtime":1612062118883,"results":"13","hashOfConfig":"9"},{"size":1553,"mtime":1612066795308,"results":"14","hashOfConfig":"9"},{"size":285,"mtime":1612065378848,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7f4vhn",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mblode/Code/toy/src/index.tsx",[],"/Users/mblode/Code/toy/src/components/Board.tsx",[],"/Users/mblode/Code/toy/src/components/Robot.tsx",["31"],"import React, { useEffect, useState } from 'react';\nimport Image from '../img/robot.png';\nimport Data, { Direction, Command } from '../helpers/Data';\nimport { useStyletron } from 'baseui';\n\ninterface IPos {\n    x: number;\n    y: number;\n    f: Direction;\n}\n\ntype Props = {\n    parentCallback: (content: string) => void;\n    file: string;\n};\n\nconst Robot = ({ parentCallback, file }: Props) => {\n    const [css] = useStyletron();\n    const [x, setX] = useState(0);\n    const [y, setY] = useState(0);\n    const [f, setF] = useState(Direction.NORTH);\n\n    const place = (oldPos: IPos, newPos: IPos): IPos => {\n        if (checkLocation(newPos.x, newPos.y)) {\n            return newPos;\n        }\n\n        return oldPos;\n    };\n\n    const move = (pos: IPos): IPos => {\n        let diffX = 0;\n        let diffY = 0;\n\n        switch (pos.f) {\n            case Direction.NORTH: {\n                diffY = 1;\n                break;\n            }\n            case Direction.EAST: {\n                diffX = 1;\n                break;\n            }\n            case Direction.SOUTH: {\n                diffY = -1;\n                break;\n            }\n            case Direction.WEST: {\n                diffX = -1;\n                break;\n            }\n        }\n\n        if (checkLocation(pos.x + diffX, pos.y + diffY)) {\n            return {\n                ...pos,\n                x: pos.x + diffX,\n                y: pos.y + diffY,\n            };\n        }\n\n        return pos;\n    };\n\n    const left = (pos: IPos): Direction => {\n        switch (pos.f) {\n            case Direction.NORTH: {\n                return Direction.WEST;\n            }\n            case Direction.EAST: {\n                return Direction.NORTH;\n            }\n            case Direction.SOUTH: {\n                return Direction.EAST;\n            }\n            default: {\n                return Direction.SOUTH;\n            }\n        }\n    };\n\n    const right = (pos: IPos): Direction => {\n        switch (pos.f) {\n            case Direction.NORTH: {\n                return Direction.EAST;\n            }\n            case Direction.EAST: {\n                return Direction.SOUTH;\n            }\n            case Direction.SOUTH: {\n                return Direction.WEST;\n            }\n            default: {\n                return Direction.NORTH;\n            }\n        }\n    };\n\n    const report = (pos: IPos) => {\n        const output = `${pos.x}, ${pos.y}, ${pos.f.toString()}`;\n        parentCallback(output);\n    };\n\n    const checkLocation = (newX: number, newY: number) => {\n        if (newX < 0 || newY < 0) {\n            return false;\n        }\n\n        if (newX >= Data.columns || newY >= Data.rows) {\n            return false;\n        }\n\n        return true;\n    };\n\n    const rotation = (): number => {\n        switch (f) {\n            case Direction.NORTH: {\n                return 0;\n            }\n            case Direction.EAST: {\n                return 90;\n            }\n            case Direction.SOUTH: {\n                return 180;\n            }\n            default: {\n                return 270;\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (file !== '') {\n            let found = false;\n            let pos = {\n                x: 0,\n                y: 0,\n                f: Direction.NORTH,\n            };\n            const lines = file.split('\\n');\n\n            for (let i = 0; i < lines.length; i++) {\n                const elements = lines[i].split(' ');\n\n                switch (elements[0] as Command) {\n                    case Command.PLACE: {\n                        const params = elements[1].split(',');\n                        let newPos = {\n                            x: parseInt(params[0]),\n                            y: parseInt(params[1]),\n                            f: params[2] as Direction,\n                        };\n\n                        pos = place(pos, newPos);\n\n                        found = true;\n                        break;\n                    }\n                    case Command.MOVE: {\n                        if (!found) break;\n                        pos = move(pos);\n                        console.log(pos);\n                        break;\n                    }\n                    case Command.LEFT: {\n                        if (!found) break;\n                        pos = {\n                            ...pos,\n                            f: left(pos),\n                        };\n                        break;\n                    }\n                    case Command.RIGHT: {\n                        if (!found) break;\n                        pos = {\n                            ...pos,\n                            f: right(pos),\n                        };\n                        break;\n                    }\n                    case Command.REPORT: {\n                        if (!found) break;\n                        report(pos);\n                        break;\n                    }\n                }\n            }\n\n            setX(pos.x);\n            setY(pos.y);\n            setF(pos.f);\n        }\n    }, [file]);\n\n    return (\n        <img\n            src={Image}\n            alt='Robot'\n            className={css({\n                position: 'absolute',\n                bottom: `${Data.width * y}px`,\n                left: `${Data.height * x}px`,\n                width: `${Data.width}px`,\n                height: `${Data.height}px`,\n                transform: `rotate(${rotation()}deg)`,\n            })}\n        />\n    );\n};\n\nexport default Robot;\n","/Users/mblode/Code/toy/src/helpers/Data.ts",[],"/Users/mblode/Code/toy/src/components/File.tsx",[],"/Users/mblode/Code/toy/src/components/App.tsx",[],"/Users/mblode/Code/toy/src/components/Report.tsx",[],{"ruleId":"32","severity":1,"message":"33","line":194,"column":8,"nodeType":"34","endLine":194,"endColumn":14,"suggestions":"35"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'move', 'place', and 'report'. Either include them or remove the dependency array.","ArrayExpression",["36"],{"desc":"37","fix":"38"},"Update the dependencies array to be: [file, move, place, report]",{"range":"39","text":"40"},[5054,5060],"[file, move, place, report]"]